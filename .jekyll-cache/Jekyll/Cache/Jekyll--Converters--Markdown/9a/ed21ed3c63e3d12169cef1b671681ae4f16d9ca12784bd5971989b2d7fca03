I"·4<p>–°–∞–π—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –∫—Ä—É–∂–æ–∫ –ø–æ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–π —è –ø—Ä–æ–≤–æ–¥–∏–ª –≤–µ—Å–Ω–æ–π 2022 –≥–æ–¥–∞ –¥–ª—è –º–ª–∞–¥—à–µ–∫—É—Ä—Å–Ω–∏–∫–æ–≤-—Ñ–∏–∑—Ç–µ—Ö–æ–≤ –∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∏–∂–µ –æ –∑–∞—á—ë—Ç–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞).</p>

<h2 id="—Ç–µ–º–∞">–¢–µ–º–∞</h2>

<p>–í–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏. –ü—É—Å—Ç—å —É –Ω–∞—Å –µ—Å—Ç—å –±—É–±–ª–∏–∫ —Å–∫–æ–ª—å —É–≥–æ–¥–Ω–æ —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã (–∏–ª–∏ –∫—Ä–µ–Ω–¥–µ–ª—å, –∏–ª–∏ –¥—Ä—É–≥–∞—è –∏–∑–æ—â—Ä—ë–Ω–Ω–∞—è –≤—ã–ø–µ—á–∫–∞). –ú–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –ø–ª–æ—â–∞–¥—å –µ–≥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ $A$, –∞ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–ª–∏–Ω—É $L$ –∫—Ä–∞—Ç—á–∞–π—à–µ–π –Ω–µ—Å—Ç—è–≥–∏–≤–∞–µ–º–æ–π –ø–µ—Ç–ª–∏ –Ω–∞ –µ–≥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. –ü–µ—Ç–ª—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ—Å—Ç—è–≥–∏–≤–∞–µ–º–æ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ–ª—å–∑—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –ø—Ä–æ–¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏ –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ —Å—Ç—è–Ω—É–ª–∞—Å—å –≤ —Ç–æ—á–∫—É. –ß–∏—Å–ª–æ $L$ (–∏–ª–∏ —Å–∞–º–∞ –∫—Ä–∞—Ç—á–∞–π—à–∞—è –Ω–µ—Å—Ç—è–≥–∏–≤–∞–µ–º–∞—è –ø–µ—Ç–ª—è) –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <em>—Å–∏—Å—Ç–æ–ª–æ–π</em> –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –±—É–±–ª–∏–∫–∞. –≠—Ç–æ —Å–ª–æ–≤–æ –≤–æ—Å—Ö–æ–¥–∏—Ç –∫ –≥—Ä–µ—á–µ—Å–∫–æ–º—É œÉœÖœÉœÑŒ≠ŒªŒªŒµŒπŒΩ ‚Äò—Å–∂–∏–º–∞—Ç—å—Å—è‚Äô. –í 1949-–º –≥–æ–¥—É –ö–∞—Ä–ª –õ—ë–≤–Ω–µ—Ä –¥–æ–∫–∞–∑–∞–ª –ø–µ—Ä–≤–æ–µ <em>—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ</em> –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (–¥–ª—è –±—É–±–ª–∏–∫–∞): 
\(L^2 \le \frac{2}{\sqrt{3}} A.\)
–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–ª—è —Å–∏—Å—Ç–æ–ª –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–±–ª–∏–∫–∞, –Ω–æ –∏ –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∫—Ä–µ–Ω–¥–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö —Ñ–∏–Ω—Å–ª–µ—Ä–æ–≤—ã—Ö –±—É–±–ª–∏–∫–æ–≤, –∏ –¥–ª—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Å–∏–º–ø–ª–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ —Å –±–æ–ª—å—à–æ–π –∫–æ–≥–æ–º–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–ª–∏–Ω–æ–π. –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏—Ö –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–æ –∏ –¥–ª—è –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏—Ö, –∏–∑–æ–ø–µ—Ä–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö, —Å–∏–º–ø–ª–µ–∫—Ç–∏—á–µ—Å–∫–∏—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ-—Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω—è—é—â–∏–π —Ä–∞–¥–∏—É—Å –ì—Ä–æ–º–æ–≤–∞, –¥–ª–∏–Ω–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–π –∑–∞–º–∫–Ω—É—Ç–æ–π –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–æ–π, –ø–æ–ø–µ—Ä–µ—á–Ω–∏–∫ –£—Ä—ã—Å–æ–Ω–∞, —Å–∏–º–ø–ª–µ–∫—Ç–∏—á–µ—Å–∫–∞—è —ë–º–∫–æ—Å—Ç—å –∏–ª–∏ –¥–ª–∏–Ω–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –≥–æ–º–æ–ª–æ–≥–∏–π. –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–ª–µ–∑–Ω—ã –∏ –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∞–ª—è—Ä–Ω–∞—è –∫—Ä–∏–≤–∏–∑–Ω–∞), –∞ —Ç–∞–∫–∂–µ –≤ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–µ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ (—ç–∫—Å–ø–∞–Ω–¥–µ—Ä—ã) –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ (–æ–±—Ö–≤–∞—Ç –∏ —Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞—Ñ–∞) —Å–≤–æ–π—Å—Ç–≤–∞. –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞–∂–Ω—ã –∏ –≤ —Ç–µ–æ—Ä–∏–∏ —á–∏—Å–µ–ª, –∏ –≤ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö.</p>

<p>–Ø —Ä–∞—Å—Å–∫–∞–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö, –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–Ω—ã—Ö –∏ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—é–∂–µ—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ —ç—Ç–∏—Ö –∏–¥–µ–π: —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏—Ö, –∏–∑–æ–ø–µ—Ä–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö, –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏—Ö (–º–∏–Ω–∏–º–∞–∫—Å–Ω—ã—Ö).
–ù–∞–ø—Ä–∏–º–µ—Ä, —è –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ—á—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ –æ–±—ä—è—Å–Ω—é —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ì—Ä–æ–º–æ–≤–∞, –¥–∞–ª–µ–∫–æ –æ–±–æ–±—â–∞—é—â–µ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –õ—ë–≤–Ω–µ—Ä–∞.</p>

<p>–Ø —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é, —á—Ç–æ –º–æ—ë –∏–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Ç–æ—Ä–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º. –ü–æ —Ö–æ–¥—É –∏–∑–ª–æ–∂–µ–Ω–∏—è —è –±—É–¥—É –≤–≤–æ–¥–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–Ω–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏–∑ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ (—á—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –≥–æ–º–æ–ª–æ–≥–∏–π) –∏ —Ä–∏–º–∞–Ω–æ–≤–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–∫–∞–∫ –∏–∑–º–µ—Ä—è—Ç—å –¥–ª–∏–Ω—ã –∏ –æ–±—ä—ë–º—ã –Ω–∞ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏—è—Ö). –ü—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–≤–æ–¥–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–Ω—ã–π —Å–µ—Ç—Ç–∏–Ω–≥ –ø–æ –º–µ—Ä–µ —Å–∏–ª.</p>

<h2 id="–ª–µ–∫—Ü–∏–∏">–õ–µ–∫—Ü–∏–∏</h2>
<p>–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 18:40 (–º—Å–∫) –≤ <a href="https://us06web.zoom.us/j/89148032937?pwd=aUNkNmd1eHUxTzd4a24wQ1VyUmVxQT09">–∑—É–º–µ</a>. –í–≤–æ–¥–Ω–∞—è –ª–µ–∫—Ü–∏—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è 10 —Ñ–µ–≤—Ä–∞–ª—è.</p>

<p><strong>–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è</strong>. –£ –∫—É—Ä—Å–∞ –µ—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π <a href="https://t.me/+55wKFd6oqJ1iOTBi">—Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç</a>, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å –∑–∞–¥–∞—á–∫–∏ —Å —Ç–æ–≤–∞—Ä–∏—â–∞–º–∏. –Ø –≤—Å—è—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –≥–æ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π —Å–ª—É—à–∞—Ç–µ–ª–µ–π. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ <a href="mailto:aleksei.balitskii@phystech.edu">–ø–æ—á—Ç—É</a> –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ <a href="https://forms.gle/JcWcTzrAeCxauHw1A">–≥—É–≥–ª-—Ñ–æ—Ä–º–µ</a>.</p>

<p><strong>–ó–∞—á—ë—Ç</strong>. –ñ–µ–ª–∞—é—â–∏–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å (–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –∑–∞—á—ë—Ç –ø–æ –∫—É—Ä—Å—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É (–≤ –ª—é–±–æ–º –≤–∏–¥–µ) —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ª–µ–∫—Ü–∏—è–º–∏. –î–ª—è –æ—Ü–µ–Ω–∫–∏ ‚Äò–æ—Ç–ª 10‚Äô –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—à–∏—Ç—å –æ–∫–æ–ª–æ –ø–æ–ª–æ–≤–∏–Ω—ã –∏–∑ –Ω–∏—Ö. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤ –∑–∞—á—ë—Ç–∫—É –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∑–∞—á—ë—Ç –ø–æ–¥ –∑–æ–Ω—Ç–∏—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º ‚Äú–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∞–ª–≥–µ–±—Ä—ã –∏ —Ç–µ–æ—Ä–∏–∏ —á–∏—Å–µ–ª‚Äù.</p>

<h2 id="–ø—Ä–æ–≥—Ä–∞–º–º–∞">‚Äî–ü—Ä–æ–≥—Ä–∞–º–º–∞‚Äî</h2>
<ul>
  <li>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–µ</li>
  <li>–õ–µ–º–º–∞ –õ–∏–Ω–¥—Å—Ç—Ä—ë–º–∞, —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –Ω–∞ –¥–æ–º–∏–Ω–æ—à–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –Æ–Ω–≥–∞</li>
  <li>–¢–µ–æ—Ä–µ–º–∞ –ú–æ–Ω—Å–∫–æ–≥–æ –æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏–∏</li>
  <li>–ì—Ä—É–ø–ø—ã –ö–æ–∫—Å–µ—Ç–µ—Ä–∞ –∏ –∫–∞–º–µ—Ä—ã –í–µ–π–ª—è</li>
  <li>–ü–µ—Ä–º—É—Ç–æ—ç–¥—Ä</li>
  <li>–†–∞–∑—Ä–µ–∑–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω–æ—Ç–æ–ø–æ–≤ –∏ –º–∞—Ç—Ä–∏—á–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ –ö–∏—Ä—Ö–≥–æ—Ñ–∞</li>
  <li>–ü–ª–∞–±–∏–∫–∏ (–ø–ª–∞–Ω–∞—Ä–Ω—ã–µ –¥–≤—É—Ü–≤–µ—Ç–Ω—ã–µ –≥—Ä–∞—Ñ—ã) –ü–æ—Å—Ç–Ω–∏–∫–æ–≤–∞</li>
  <li>–°–µ—á–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–æ–Ω–æ—Ç–æ–ø–∞ –ø–æ –ì–∞–ª–∞—à–∏–Ω—É</li>
  <li>–í—ã—Å—à–∏–µ –ø–æ—Ä—è–¥–∫–∏ –ë—Ä—é–∞ –∏ —Ñ–ª–∏–ø–æ–≤—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è</li>
</ul>

<h2 id="c—Å—ã–ª–∫–∏">‚ÄîC—Å—ã–ª–∫–∏‚Äî</h2>
<ul>
  <li>R. Brooks, C. Smith, A. Stone, W. Tutte, <a href="https://carlo-hamalainen.net/stuff/Brooks,%20Smith,%20Stone,%20Tutte%20-%20The%20dissection%20of%20rectangles%20into%20squares%20(1940).pdf">The dissection of rectangles into squares</a>. <em>Duke Mathematical Journal</em> (1940).</li>
  <li>–ï. –°–º–∏—Ä–Ω–æ–≤, <a href="https://users.mccme.ru/smirnoff/papers/dubna14.pdf">–î–∏–∞–≥—Ä–∞–º–º—ã –Æ–Ω–≥–∞, –ø–ª–æ—Å–∫–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏ –∑–Ω–∞–∫–æ—á–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –º–∞—Ç—Ä–∏—Ü—ã</a>. <em>–ú–¶–ù–ú–û</em> (2014).</li>
  <li>–ï. –°–º–∏—Ä–Ω–æ–≤, <a href="https://www.mccme.ru/free-books/dubna/smirnov-aztec.pdf">–¢—Ä–∏ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ –∞—Ü—Ç–µ–∫—Å–∫–∏–π –±—Ä–∏–ª–ª–∏–∞–Ω—Ç</a>, <em>–ú–¶–ù–ú–û</em> (2015).</li>
  <li>P. Monsky, <a href="https://www.jstor.org/stable/pdf/2317329.pdf">On dividing a square into triangles</a>. <em>The American Mathematical Monthly</em> (1970).</li>
  <li>J. Humphreys, <a href="books.google.ru/books?id=ODfjmOeNLMUC">Reflection groups and Coxeter groups</a>. <em>Cambridge university press</em> (1990).</li>
  <li>J. Stasheff, <a href="https://www.ams.org/tran/1963-108-02/S0002-9947-1963-99939-9/S0002-9947-1963-99939-9.pdf">Homotopy associativity of H-spaces, I</a>. <em>Transactions of the American Mathematical Society</em> (1963).</li>
  <li>A. Postnikov, <a href="https://academic.oup.com/imrn/article-pdf/2009/6/1026/18937162/rnn153.pdf">Permutohedra, associahedra, and beyond</a>. <em>International Mathematics Research Notices</em> (2009).</li>
  <li>A. Postnikov, <a href="https://arxiv.org/pdf/math/0609764">Total positivity, Grassmannians, and networks</a>. <em>ArXiv preprint</em> (2006).</li>
  <li>P. Galashin, <a href="https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/plms.12139">Plabic graphs and zonotopal tilings</a>. <em>Proceedings of the London Mathematical Society</em> (2018).</li>
  <li>G. Ziegler, <a href="https://opus4.kobv.de/opus4-zib/files/60/SC-91-10.pdf">Higher Bruhat orders and cyclic hyperplane arrangements</a>. <em>Topology</em> (1993).</li>
</ul>

<p>$\sum_i x_i = 1$</p>

\[\sum_i x_i = 1\]

<h2 id="—Ç–µ–∑–∏—Å—ã">‚Äî–¢–µ–∑–∏—Å—ã‚Äî</h2>

<p><em>–ü–µ—Ä–º—É—Ç–æ—ç–¥—Ä–æ–º</em> \(P_{n-1}\) –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫ –≤ \(\{(x_1, \ldots, x_n) \in \mathbb{R}^{n} ~\vert~ \sum x_i = n(n-1)/2\} \cong \mathbb{R}^{n-1}\), –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–∫</p>
<ul>
  <li>–≤—ã–ø—É–∫–ª–∞—è –æ–±–æ–ª–æ—á–∫–∞ —Ç–æ—á–µ–∫, –ø–æ–ª—É—á–∞–µ–º—ã—Ö –∏–∑ \((0,1,\ldots,n-1)\) –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç;</li>
  <li>–∏–ª–∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫ –ù—å—é—Ç–æ–Ω–∞ –≤–∞–Ω–¥–µ—Ä–º–æ–Ω–¥–æ–≤—Å–∫–æ–≥–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ \(\det (x_i^{j-1})_{i,j=1}^n\);</li>
  <li>–∏–ª–∏ —Å—É–º–º–∞ –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Ä—ë–±–µ—Ä —Å–∏–º–ø–ª–µ–∫—Å–∞ \(\{(x_1, \ldots, x_n) \in \mathbb{R}^{n} ~\vert~ x_i \ge 0, \sum x_i = 1\}\);</li>
  <li>–∏–ª–∏ —è—á–µ–π–∫–∞ –í–æ—Ä–æ–Ω–æ–≥–æ —Ä–µ—à—ë—Ç–∫–∏ \(A_{n-1}^*\) (—Å–º. –∑–∞–¥–∞—á–∏).</li>
</ul>

<p><img src="/mipt2023systolic/images/amanha.jpg" alt="–°–∏—Å—Ç–æ–ª—ã –∏ –¥–∏–∞—Å—Ç–æ–ª—ã" title="–§–æ—Ç–æ: –ê. –ë–∞–ª–∏—Ü–∫–∏–π" /></p>

<blockquote>
  <p><strong>–¢–µ–æ—Ä–µ–º–∞.</strong> \((n-1)\)-–º–µ—Ä–Ω—ã–π –æ–±—ä—ë–º \(P_{n-1}\) —Ä–∞–≤–µ–Ω \(n^{n-3/2}\).</p>
</blockquote>

<p><em>–ù–∞–±—Ä–æ—Å–æ–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.</em>
–ü–µ—Ä–º—É—Ç–æ—ç–¥—Ä —è–≤–ª—è–µ—Ç—Å—è <em>–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∑–æ–Ω–æ—Ç–æ–ø–æ–º</em>, —Ç–æ –µ—Å—Ç—å –æ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º –≤ –≤–∏–¥–µ —Å—É–º–º—ã –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ
\[
Z_G = \sum\limits_{(i,j) \in E(G)} [e_i, e_j],
\]
–≥–¥–µ \(G\) ‚Äî –∫–ª–∏–∫–∞ –Ω–∞ \(n\) –≤–µ—Ä—à–∏–Ω–∞—Ö. –ó–æ–Ω–æ—Ç–æ–ø –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å—É–º–º—ã –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ \((n-1)\) —Ä—ë–±–µ—Ä, –Ω–µ –ª–µ–∂–∞—â–∏—Ö –≤ –æ–¥–Ω–æ–π –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤—Å–µ –æ–Ω–∏ –∏–º–µ—é—Ç –æ–±—ä—ë–º \(\sqrt{n}\). –ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥—ã —Ä–∞–∑–±–∏–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∑–æ–Ω–æ—Ç–æ–ø–∞ –æ—Ç–æ–∂–¥–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —Å –æ—Å—Ç–æ–≤–Ω—ã–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏ –≤ \(G\), –∞ –≤ –∫–ª–∏–∫–µ –∏—Ö \(n^{n-2}\), —á—Ç–æ –ª–µ–≥–∫–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ –º–∞—Ç—Ä–∏—á–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞.
\(\square\)</p>

<h2 id="c—Å—ã–ª–∫–∏-1">‚ÄîC—Å—ã–ª–∫–∏‚Äî</h2>
<ul>
  <li>A. Postnikov, <a href="https://academic.oup.com/imrn/article-pdf/2009/6/1026/18937162/rnn153.pdf">Permutohedra, associahedra, and beyond</a>. <em>International Mathematics Research Notices</em> (2009).</li>
  <li>–ê. –ê–π–∑–µ–Ω–±–µ—Ä–≥, <a href="https://www.mccme.ru/dubna/2018/notes/ayzenberg-notes.pdf">–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º–∞—Ç—Ä–∏—Ü –∏ –≤—ã–ø—É–∫–ª—ã–µ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏</a>.</li>
</ul>

<p>È¢ÑËÆ°ÈöæÂ∫¶ÔºöCF Div2-</p>

<p><a href="https://github.com/wu-kan/SYSU-Collegiate-Programming-Contest-2020--Online">È¢òÁõÆÊï∞ÊçÆ&amp;Áé∞Âú∫Ê¶úÂçï</a></p>

<h2 id="welcome-to-sysu">Welcome to SYSU</h2>

<p>Sun Yat-sen University, originally known as National Guangdong University, was founded in 1924 by Dr. Sun Yat-sen (also called Sun Zhongshan), a great democratic revolutionary leader of the 20th century. The University is located in Guangdong Province, an area neighboring Hong Kong and Macao, which is at the forefront of China‚Äôs reform and opening up.</p>

<p><img src="https://i.loli.net/2020/11/14/cPQZhbFO3xgnYUd.jpg" alt="welcome" /></p>

<p>Being one of the leading universities in the People‚Äôs Republic of China, Sun Yat-sen University is a comprehensive multi-disciplinary university, including the humanities, social sciences, natural sciences, technical sciences, medical sciences, pharmacology, and management science. At present, Sun Yat-sen University covers a total area of 6.17 square kilometers and has 4 campuses: Guangzhou South Campus, Guangzhou North Campus, Guangzhou East Campus, and Zhuhai Campus.</p>

<h3 id="input">Input</h3>

<p>The input contains a positive integers n.</p>

<p>$1\le n\le 12$</p>

<h3 id="output">output</h3>

<p>You should output the lexicographically N-th string with the same letters(2*<code class="language-plaintext highlighter-rouge">S</code>+1*<code class="language-plaintext highlighter-rouge">Y</code>+1*<code class="language-plaintext highlighter-rouge">U</code>) as <code class="language-plaintext highlighter-rouge">SYSU</code>.</p>

<h3 id="sample-input-1">Sample Input 1</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
</code></pre></div></div>

<h3 id="sample-output-1">Sample Output 1</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SSUY
</code></pre></div></div>

<h3 id="sample-input-2">Sample Input 2</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
</code></pre></div></div>

<h3 id="sample-output-2">Sample Output 2</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SYSU
</code></pre></div></div>

<h3 id="source">Source</h3>

<p>Âê¥Âùé</p>

<h3 id="solution">Solution</h3>

<p>È¢òÁõÆÂ§ßÊÑèÔºöËæìÂá∫‰∏é <code class="language-plaintext highlighter-rouge">SYSU</code> Â≠óÊØçÁõ∏ÂêåÁöÑÂ≠óÂÖ∏Â∫èÁ¨¨ $n$ Â∞èÁöÑ‰∏≤„ÄÇ</p>

<p>ÁÜüÊÇâ STL ÁöÑÂêåÂ≠¶ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî® <code class="language-plaintext highlighter-rouge">next_permutation</code> Ëß£ÂÜ≥.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">string</span> <span class="n">s</span><span class="p">(</span><span class="s">"SYSU"</span><span class="p">);</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span> <span class="o">--</span><span class="n">n</span><span class="p">;)</span>
		<span class="n">next_permutation</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>‰∏çÁÜüÁöÑÂêåÂ≠¶Áõ¥Êé•ÊâãÁÆóÁÑ∂ÂêéÊâìË°®‰πüÊòØÂèØ‰ª•ÁöÑÂï¶~</p>

<p><img src="https://i.loli.net/2020/11/14/fRLtgH9M13ZWxId.png" alt="~~Á¨¨‰∏ÄÈ¢ò„ÅÆÁ•û~~" /></p>

<p><del>Ê¨¢ËøéÊä•ËÄÉ‰∏≠Â±±Â§ßÂ≠¶ÔºÅ</del></p>

<h2 id="formula">Formula</h2>

<p>This formula is written as an equation about the length of edges A, B and C, which is usually called Pythagorean law.</p>

<p>$A^2 + B^2 = C^2$</p>

<p>Where $C$ is the length of the slanted side and $A$ and $B$ are the lengths of the other two sides.</p>

<p>Given $n$, you need to compute right triangles with side lengths $A$, $B$ and $C$ satisfying inequality $1 \le A \le B \le C \le n$.</p>

<h3 id="input-1">Input</h3>

<p>The first line of input contains an integer $n~(1\leq n\leq 10000)$.</p>

<h3 id="output-1">Output</h3>

<p>The first line of input contains an integer donating the answer.</p>

<h3 id="sample-input">Sample Input</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
</code></pre></div></div>

<h3 id="sample-output">Sample Output</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
</code></pre></div></div>

<h3 id="note">Note</h3>

<p>3, 4, 5</p>

<h3 id="source-1">Source</h3>

<p>ËåÉ‰ø≠Ë±™</p>

<h3 id="solution-1">Solution</h3>

<p>Êö¥ÂäõÊûö‰∏æ aÔºåb Âç≥ÂèØ„ÄÇ</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">a</span><span class="p">)</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">b</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">double</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">*</span> <span class="n">b</span><span class="p">);</span>
			<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">cc</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">==</span> <span class="n">cc</span><span class="p">)</span>
				<span class="o">++</span><span class="n">ans</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><del>Â¶ÇÊûúÊãÖÂøÉÊó∂Èó¥Ë¢´Âç°ÁöÑËØùÊâìË°®‰πüÊòØÊØ´Êó†ÈóÆÈ¢òÁöÑ„ÄÇ</del></p>

<h2 id="island">Island</h2>

<p>A tour group is trapped on an island. The island can be regarded as a matrix of equal side length.</p>

<p>Each grid is either an obstacle (character <code class="language-plaintext highlighter-rouge">#</code>), a tourist (character <code class="language-plaintext highlighter-rouge">O</code>), or an open space (character <code class="language-plaintext highlighter-rouge">.</code>), visitors can walk up, down, left, right(to neighboring grid), but can‚Äôt walk over obstacles.</p>

<p>Ask how many tourists can never get out of the island.</p>

<h3 id="input-2">Input</h3>

<p>First line of the input is an integer $T$($1\le T \le 10$) indicating the number of test cases.</p>

<p>For each case, the first line contains an integer $n$ ($1\le n \le 50$) indicating the side length of island, each of the following $n$ lines contains a string with exact n charactors(obstacle <code class="language-plaintext highlighter-rouge">#</code>, tourist <code class="language-plaintext highlighter-rouge">O</code> or space <code class="language-plaintext highlighter-rouge">.</code>).</p>

<h3 id="output-2">Output</h3>

<p>For each case output one integer per line, the number of tourist(s) cannot get out of the island.</p>

<h3 id="sample-input-1">Sample Input</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
4
O.##
.#O#
<span class="c">#O.#</span>
.###
</code></pre></div></div>

<h3 id="sample-output-1">Sample Output</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div>

<h3 id="source-2">Source</h3>

<p>Ê¢ÅËµõÊ≥¢</p>

<h3 id="solution-2">Solution</h3>

<p>È¢òÁõÆÂ§ßÊÑèÔºöÁªôÂÆö‰∏Ä‰∏™ $n\times n$ Áü©ÈòµÔºåÊØè‰∏™ÁÇπË¶Å‰πàÊòØÊ∏∏ÂÆ¢ÔºåË¶Å‰πàÊòØÁ©∫Âú∞ÔºåË¶Å‰πàÊòØÈöúÁ¢çÁâ©ÔºåÊØè‰∏™‰∫∫ÊØèÊ¨°ÂèØ‰ª•Êúù‰∏ä‰∏ãÂ∑¶Âè≥‰ªª‰∏ÄÊñπÂêëËµ∞‰∏ÄÊ†ºÔºåÈóÆÊúâÂ§öÂ∞ë‰∫∫ÊúÄÁªàÂèØ‰ª•Ëµ∞Âá∫Áü©Èòµ„ÄÇ</p>

<p>Êö¥ÂäõÁöÑÂÅöÊ≥ïÊòØÔºåÊØè‰∏™Ê∏∏ÂÆ¢ÂàÜÂà´‰ª•‰ªñÂàùÂßã‰ΩçÁΩÆ‰∏∫Ëµ∑ÁÇπÔºåÊêúÁ¥¢ÔºàBFS/DFSÔºâÂá∫Âà∞ËææÁü©Èòµ‰πãÂ§ñÁöÑË∑ØÂæÑÔºåÊó∂Èó¥Â§çÊùÇÂ∫¶ $O(Tn^4)$</p>

<p>ÂèØ‰ª•ÂèëÁé∞Â¶ÇÊûúÊüê‰∏™Ê†ºÂ≠êÂèØ‰ª•ÊúÄÁªàËµ∞Âá∫Áü©ÈòµÔºåÈÇ£‰πàÊâÄÊúâË∑ØËøáËØ•Ê†ºÂ≠êÁöÑ‰∫∫ÈÉΩÂèØ‰ª•ÊúÄÁªàËµ∞Âá∫Áü©Èòµ„ÄÇ</p>

<p>‰∏äËø∞ÊêúÁ¥¢ËøáÁ®ã‰∏ÄÊó¶Ëµ∞Âà∞<strong>ÊúÄÁªàÂèØ‰ª•ÈÄÉÂá∫</strong>ÁöÑÊ†ºÂ≠êÔºåÂ∞±ÂèØ‰ª•Á´ãÂç≥ËøîÂõû„ÄÇÊØè‰∏™Ê†ºÂ≠êÂè™‰ºöË¢´ÈÅçÂéÜ‰∏ÄÊ¨°ÔºåÊó∂Èó¥Â§çÊùÇÂ∫¶ $O(Tn^2)$„ÄÇ</p>

<p>ÂêåÊ†∑ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶Ôºå‰πüÂèØ‰ª•‰ªéÁü©ÈòµÁöÑÈùûÈöúÁ¢çËæπÁïåÂºÄÂßãÂêëÂÜÖÊêúÁ¥¢ÔºåËÉΩÂà∞ËææÁöÑÊ∏∏ÂÆ¢Ê†ºÂ≠êËÇØÂÆöÂèØ‰ª•Ê≤øÁùÄÁõ∏ÂèçÁöÑË∑ØÈÄÉÂá∫Âéª„ÄÇ</p>

<!--  -->

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">dir</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}};</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">105</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span><span class="p">][</span><span class="n">maxn</span><span class="p">];</span>
<span class="kt">bool</span> <span class="n">vis</span><span class="p">[</span><span class="n">maxn</span><span class="p">][</span><span class="n">maxn</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">_</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">_</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">_</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
		<span class="n">memset</span><span class="p">(</span><span class="n">vis</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">vis</span><span class="p">));</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'#'</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
					<span class="n">q</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
		<span class="p">{</span>
			<span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
			<span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">it</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">it</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">dir</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">)</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">vis</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="n">vis</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
				<span class="n">q</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'O'</span><span class="p">)</span>
					<span class="n">ans</span><span class="o">++</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<!--  -->

<h2 id="liz-and-the-blue-bird">Liz and the Blue Bird</h2>

<p>After a long thought, Liz made a tough decision. When the girl came back home from picking raspberries with delight. Liz said goodbye to the girl with smile. A basket of raspberries dropped, scattering on the floor. ‚ÄúYou are ought to be free and use your lightsome wings to fly to everywhere you want.‚Äù ‚ÄúWhy? I just want to stay with you forever. Only by your side can I taste the sweet of happiness.‚Äù ‚ÄúI am the cage that traps you. You have wings and vast sky to explore. I can‚Äôt deprive you of your wings,‚Äù Liz opened the door, smiling mildly. ‚ÄúSo just leave here and fly high. Please let me watch your beautiful figure go away,‚Äù Liz held out her hand, ‚ÄúThat‚Äôs the way I convey my feelings.‚Äù She paused and took a deep breath ‚ÄúI love you.‚Äù The girl sobbed, stepped slowly towards door. She looked back, with love, with unwillingness, and turned into a blue bird, flying away.</p>

<p><a href="https://twitter.com/Lyytoaoitori/status/1073908097414946817"><img src="https://i.loli.net/2020/11/11/WCUM8ndNwVtAl6h.jpg" alt="bluebird" /></a></p>

<p>After the blue bird flew away, Liz still missed her very much. Worrying that she and other small animals might be caught in a storm again, Liz decided to transplant trees in the woods to cover as much area as possible. There were $n$ trees in the woods, and each tree $T_i$ can be represented as a closed interval $[a_i,b_i]$. Liz wanted to find a solution so that all intervals covered $[0,10000]$, and the displacement of the interval with the largest displacement was minimized. Specifically, suppose $T_i$ was moved to $[a_i+c_i, b_i+c_i]$, and Liz wanted to minimize $\max_i\lvert c_i \rvert$.</p>

<h3 id="input-3">Input</h3>

<p>First line of the input is an integer $n$ indicating the number of trees.</p>

<p>The following $n$ lines, each line contains 2 integers $a_i,b_i$.</p>

<p>$1&lt;n&lt;10000, 0\le a_i&lt;b_i\le 10000, \sum_{i=1}^n(b_i-a_i)\ge 10000$</p>

<h3 id="output-3">Output</h3>

<p>Output a real number that represents the answer.</p>

<p>If the answer is an integer, output the integer directly; otherwise, keep 1 decimal place.</p>

<p>If you still have any questions, you can refer to the sample output.</p>

<h3 id="sample-input-1-1">Sample Input 1</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
10 5010
4980 9980
</code></pre></div></div>

<h3 id="sample-output-1-1">Sample Output 1</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20
</code></pre></div></div>

<h3 id="sample-input-2-1">Sample Input 2</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4
0 4000
3000 5000
5001 8000
7000 10000
</code></pre></div></div>

<h3 id="sample-output-2-1">Sample Output 2</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.5
</code></pre></div></div>

<h3 id="note-1">Note</h3>

<p>The answer must be a semi-integer, that is, twice the number must be an integer.</p>

<h3 id="source-3">Source</h3>

<p>Âê¥Âùé</p>

<h3 id="solution-3">Solution</h3>

<p>‰∫åÂàÜÁ≠îÊ°à $\Delta$ÔºåÁÑ∂ÂêéÂà§Êñ≠ÊòØÂê¶ÊúâÁßªÂä®ÊñπÊ°à‰ΩøÂæóÊâÄÊúâÂå∫Èó¥ÁöÑÁßªÂä®ÈáèÈÉΩ‰∏çË∂ÖËøá $\Delta$„ÄÇ‰ª§ $[S,T]=[0,10000]$ Ë°®Á§∫Êàë‰ª¨Ë¶ÅË¶ÜÁõñÁöÑÂå∫ÂüüÔºåÂΩì $\Delta$ Â∑≤ÁªèÁªôÂÆöÊó∂ÔºåÂèØ‰ª•‰ΩøÁî®Â¶Ç‰∏ãË¥™ÂøÉÁÆóÊ≥ï„ÄÇ</p>

<ul>
  <li>ÂàùÂßãÂåñ $A=S$„ÄÇÔºàÊ≥®ÔºöÁÆóÊ≥ïËøêË°åËøáÁ®ã‰∏≠‰øùËØÅ $[S,A]$ Â∑≤ÁªèË¢´Ë¶ÜÁõñÔºâ</li>
  <li>While $A&lt;T$
    <ol>
      <li>ÂÅáÂÆöÂΩìÂâçÊú™Ë¢´‰ΩøÁî®ËøáÁöÑÂå∫Èó¥‰∏∫ $D_1,\dots,D_K$„ÄÇ</li>
      <li>Âú®Ëøô‰∫õÂå∫Èó¥‰∏≠Êâæ‰∏Ä‰∏™Âú® $[-\Delta,+ \Delta]$ Ëøô‰∏™ÁßªÂä®ÈáèÂÜÖËÉΩ cover ÁÇπ A ÁöÑÂå∫Èó¥Âá∫Êù•„ÄÇÂ¶ÇÊûúÊúâÂ§ö‰∏™ËøôÊ†∑ÁöÑÂå∫Èó¥ÔºåÂàôÈÄâÂÖ∂‰∏≠Âè≥Á´ØÁÇπÊúÄÂ∞èÁöÑÈÇ£‰∏Ä‰∏™„ÄÇ</li>
      <li>‰∏çÂ¶®ÂÅáÂÆö $D_1$ ÊòØÊâÄÈÄâÁöÑÂå∫Èó¥„ÄÇÈÇ£‰πàÔºåÊàë‰ª¨‰ΩøÁî® $D_1$ Êù•Ë¶ÜÁõñ $A$„ÄÇÂÖ∑‰ΩìÂÅöÊ≥ï‰∏∫ÔºöÁßªÂä® $D_1$ ‰ΩøÂæóÂú®‰øùËØÅ $A$ ÁÇπË¢´ÂÆÉË¶ÜÁõñÁöÑÂâçÊèê‰∏ãÁßªÂä®ÂêéÁöÑ‰ΩçÁΩÆË∂äÈù†Âè≥Ë∂äÂ•ΩÔºÅ</li>
      <li>ÊääÂå∫Èó¥ $D_1$ Ê†áËÆ∞‰∏∫Â∑≤‰ΩøÁî®ËøáÂπ∂‰∏îÊõ¥Êñ∞ $A$ ‰∏∫ $D_1$ ÁßªÂä®ÂêéÁöÑÂè≥ÂùêÊ†á„ÄÇ</li>
    </ol>
  </li>
</ul>

<p>ÁÆóÊ≥ïÊ≠£Á°ÆÊÄßËØÅÊòéÊÄùË∑ØÂ¶Ç‰∏ã„ÄÇÂÅáÂÆöÂú®Êüê‰∏™Áä∂ÊÄÅ‰∏ãÂ≠òÂú®ÂØπÊú™‰ΩøÁî®Âå∫Èó¥ÁöÑ‰∏Ä‰∏™ÊîæÊ≥ïÔºàËÆ∞‰Ωú $\text{SOL}$ÔºâÂéªË¶ÜÁõñ $[A,T]$ Ëøô‰∏™Âå∫ÂüüÔºåÈÇ£‰πàÊåâ‰∏äËø∞Ë¥™ÂøÉÊ†áÂáÜËøêË°å‰∏ãÂéª‰πü‰∏ÄÂÆöËÉΩÊâæÂà∞‰∏Ä‰∏™ÊîæÊ≥ïÂéªË¶ÜÁõñ $[A,T]$ Ëøô‰∏™Âå∫Âüü„ÄÇ‰ΩøÁî®ÂΩíÁ∫≥Ê≥ïËØÅÊòéËøô‰∏™ÁªìËÆ∫„ÄÇÊòæÁÑ∂‰∏äËø∞ÂëΩÈ¢òÂØπ $K=1$ ÊòØÊàêÁ´ãÁöÑÔºå‰∏ãÈù¢ËÄÉËôë $K&gt;1$ÁöÑÊÉÖÂÜµ„ÄÇ</p>

<p>ÂÅáÂÆö $D_1$ ÊòØÊ†πÊçÆË¥™ÂøÉÁÆóÊ≥ïÈÄâÊã©ÁöÑÈÇ£‰∏™Âå∫Èó¥„ÄÇÂ¶ÇÊûú $\text{SOL}$ ‰∏≠ $D_1$ Ë¢´ÊîæÁΩÆÁöÑ‰ΩçÁΩÆËÉΩ cover ‰Ωè $A$„ÄÇÈÇ£‰πàÂæàÊòéÊòæÁªìËÆ∫ÊòØÊ≠£Á°ÆÁöÑ„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÂÅáÂÆö $\text{SOL}$ Áî®‰∫ÜÂè¶‰∏Ä‰∏™Âå∫Èó¥Ôºå‰æãÂ¶Ç $D_2$ÔºåÊù• cover ÁÇπ $A$„ÄÇ‰∏çÂ¶®ÂÅáÂÆö $D_2$ Âú® $\text{SOL}$ ‰∏≠Ë¢´ÁßªÂä®Âà∞‰∫ÜÂ∞ΩÈáèÈù†Âè≥ÁöÑ‰ΩçÁΩÆ„ÄÇÂê¶ÂàôÂèØ‰ª•Ë∞ÉÊï¥ SOL„ÄÇÂÅáËÆæ $D_2$ Âú® $\text{SOL}$ ‰∏≠ÁßªÂä®ÂêéÁöÑÂè≥ÂùêÊ†á‰∏∫ $A‚Äô$„ÄÇÂàÜ‰∏§ÁßçÊÉÖÂÜµËÆ®ËÆ∫Ôºö</p>

<ol>
  <li>$D_1$ ÁßªÂä®Âêé‰∏çËÉΩÂ§üË¶ÜÁõñ $A‚Äô$„ÄÇÈÇ£‰πà $D_1$ Âú® $\text{SOL}$ ‰∏≠ÂÆûÈôÖ‰∏äÊòØÊ≤°ÊúâÁî®ÁöÑÔºÅÂõ†Ê≠§Êàë‰ª¨ÂÖàÁî® $D_1$ ÂéªË¶ÜÁõñ A Âπ∂‰∏ç‰ºöÈîôÂ§±‰∏Ä‰∏™Ëß£„ÄÇ</li>
  <li>$D_1$ ÁßªÂä®ÂêéËÉΩÂ§üË¶ÜÁõñ $A‚Äô$„ÄÇÊ≠§Êó∂ÔºåÈÄöËøáÂΩíÁ∫≥ÂÅáËÆæÔºåÊàë‰ª¨Áü•ÈÅìÂ≠òÂú®‰∏Ä‰∏™Ëß£ $\text{SOL‚Äô}$„ÄÇ‰ΩøÂæóÂú®‰∏ã‰∏ÄÊ≠•‰∏≠Êàë‰ª¨ÈÄâÂÆö $D_1$ ÂéªË¶ÜÁõñ $A‚Äô$„ÄÇËøôÊó∂ÔºåÊàë‰ª¨ËÉΩÂ§üÁúãÂà∞ÔºàËøôÈáåËØ∑ËØªËÄÖËá™Â∑±ÁîªÂõæÈ™åËØÅÔºâÔºåÈÄöËøáË∞ÉÊï¥ $\text{SOL‚Äô}$ ‚Äî‚ÄîÂ∞Ü $D_1$ Â∑¶ÁßªËÄåÂ∞Ü $D_2$ Âè≥Áßª‚Äî‚ÄîËÉΩ‰ΩøÂæóËøô‰∏§‰∏™Âå∫Èó¥‰ªçÁÑ∂Ë¶ÜÁõñ‰Ωè $[A,A‚Äô]$ ÁöÑÂâçÊèê‰∏ãÔºå$D_1$ Ë¶ÜÁõñ‰∫ÜÁÇπ $A$„ÄÇ</li>
</ol>

<p>Ê†πÊçÆ‰ª•‰∏ä‰∏§ÁßçÊÉÖÂÜµÊàë‰ª¨Áü•ÈÅìÔºåÊúâËß£ÁöÑÊÉÖÂÜµ‰∏ãÊàë‰ª¨ÁöÑË¥™ÂøÉÊ†áÂáÜ‰πüËÉΩÊâæÂà∞‰∏Ä‰∏™Ëß£„ÄÇÁÆóÊ≥ïÁöÑÊ≠£Á°ÆÊÄßÂæóËØÅ„ÄÇ</p>

<p>Ê†πÊçÆÁÆóÊ≥ïÊµÅÁ®ãÔºåÁªôÂÆö $\Delta$ÔºåÂæàÂÆπÊòìÂú® $O(n^2)$ ÁöÑÊó∂Èó¥ÂÜÖÂÆûÁé∞Âà§ÂÆöÔºå‰∏çËøáËøô‰ºöË∂ÖÊó∂„ÄÇÂà©Áî®Â†ÜËøô‰∏ÄÊï∞ÊçÆÁªìÊûÑÔºåÊàë‰ª¨ÂèØ‰ª•Â∞ÜÁÆóÊ≥ïÁöÑÊïàÁéáÊèêÂçáÂà∞ $O(n\log n)$„ÄÇÂ∞ÜÊú™‰ΩøÁî®ÁöÑÂå∫Èó¥ÂàÜ‰∏∫‰∏âÁ±ªÔºö</p>

<ul>
  <li>BornÔºöÂÆÉÁöÑÂ∑¶Á´ØÁÇπ $&gt;A+\Delta$„ÄÇ</li>
  <li>ActiveÔºöÂÆÉ‰∏éÂå∫Èó¥ $[A-\Delta,A+ \Delta]$ ÊúâÁõ∏‰∫§„ÄÇ‰πüÂ∞±ÊòØÈÄöËøáÁßªÂä®ÂêéÂÆÉËÉΩË¶ÜÁõñ A ÁÇπ„ÄÇ</li>
  <li>DeadÔºöÂÆÉÁöÑÂè≥Êñ≠ÁÇπ $&lt;A-\Delta$„ÄÇ</li>
</ul>

<p>Áî±‰∫éÁÆóÊ≥ïËøáÁ®ã‰∏≠ A ÊòØ‰∏çÊñ≠ÂèòÂ§ßÁöÑ„ÄÇÊâÄ‰ª• Dead ÁöÑÂå∫Èó¥Ê∞∏ËøúÊòØ Dead ÁöÑ„ÄÇ‰∏∫ÂÆûÁé∞Êàë‰ª¨ÁöÑÁÆóÊ≥ïÔºåÂè™ÈúÄ‰∏Ä‰∏™ÊúÄÂ∞èÂ†ÜÊù•Áª¥Êä§ Active ÁöÑÂå∫Èó¥ÔºåKey ‰∏∫Âå∫Èó¥ÁöÑÂè≥Á´ØÁÇπ„ÄÇ</p>

<p>ÂèÇËÄÉÔºöDanny Z. Chen Yan Gu Jian Li Haitao Wang, Algorithms on Minimizing the Maximum Sensor Movement for Barrier Coverage of a Linear Domain</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e4</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="mf">1e4</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">double</span> <span class="n">EPS</span> <span class="o">=</span> <span class="mf">0.25</span><span class="p">;</span>
<span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">ok</span><span class="p">(</span><span class="kt">double</span> <span class="n">delta</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">double</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">A</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="o">-</span> <span class="n">EPS</span><span class="p">;)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">&lt;=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">EPS</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
			<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="o">-</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">,</span> <span class="n">i</span><span class="p">});</span>
		<span class="kt">int</span> <span class="n">updated</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span> <span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">updated</span><span class="p">;</span> <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">first</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">second</span><span class="p">,</span>
				<span class="n">A</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">EPS</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">+</span> <span class="n">delta</span><span class="p">)</span>
					<span class="n">A</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">delta</span><span class="p">;</span>
				<span class="k">else</span>
					<span class="n">A</span> <span class="o">+=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">;</span>
				<span class="n">updated</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">updated</span><span class="p">)</span>
			<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">bs</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">e</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">ok</span><span class="p">(</span><span class="n">m</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">?</span> <span class="n">bs</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">bs</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="n">scanf</span><span class="p">(</span><span class="s">"%d%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">p</span> <span class="o">+</span> <span class="n">n</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">bs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">M</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">ans</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">ans</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">".5"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ÂÆåÊï¥ÁöÑËÉåÊôØÊïÖ‰∫ãÂèØËßÅ <a href="https://www.bilibili.com/read/cv7276984">https://www.bilibili.com/read/cv7276984</a> ÔºåÊ≠§Â§ÑÂ∑≤Ëé∑ÂæóÂéü‰ΩúËÄÖÁöÑ‰ΩøÁî®ËÆ∏ÂèØ„ÄÇ</p>

<p><img src="https://i.loli.net/2020/11/11/wQPsCh9TSRqfaVH.png" alt="‰ΩøÁî®ËÆ∏ÂèØ" /></p>

<p><del>Âº∫Êé®‰∏ÄÊ≥¢Âà©ÂÖπ‰∏éÈùíÈ∏üÔºåÂÆòÊñπÂú®ÂõΩÂÜÖÂºÄÈÄö‰∫Ü<a href="https://weibo.com/u/7479642080">ÂæÆÂçö</a>Ôºå‰∏çËøáÊÑüËßâÁ¶ª‰∏äÊò†ËøòÈÅ•ÈÅ•Êó†ÊúüÁöÑÊ†∑Â≠ê‚Ä¶</del></p>

<h2 id="berth-allocation">Berth Allocation</h2>

<p>In a container terminal, the bottleneck of the traffic is often at the quay. Therefore, the terminal operator has to allocate a limited number of berths of the quay to vessels in an efficient way.</p>

<p><img src="https://i.loli.net/2020/11/11/EpjJgw6evXlaMsd.png" alt="berth" /></p>

<p>As illustrate in Figure above (An illustrated example, with a quay of $n=5$ berths, $m=7$ vessels, where two vessels are waiting outside the quay), consider a container terminal of $n$ berths and $m$ vessels arrived, where each vessel $i$ (for $i=1,2,\dots,m$) requires a berth to load and unload containers, and the handling time is $t_{i,j}$ minutes if berth $j$ (for $j=1, 2, \dots, n$) is allocated to vessel $i$. For each vessel $i=1,2,\dots,m$, the terminal manager, Brother D, needs to decide on the berth, denoted by $b_i\in\lbrace 1,2,\dots,n\rbrace $, as well on the starting time of berthing, denoted by $s_i\ge 0$. It must be satisfied that no two vessels are allowed to occupy the same berth simultaneously, i.e., for any two different vessels i and j, if $b_i=b_j$, then either $s_i+t_{i,b_i}\le s_j$ or $s_j+t_{j,b_j}\le s_i$ must be satisfied. Your task is to help Brother D to minimize the total completion time of the vessels, i.e., to minimize $\sum_{i=1}^m(s_i+t_{i,b_i})$.</p>

<h3 id="input-4">Input</h3>

<p>First line of the input is an integer $T$ indicating the number of test cases. For each case, the first line contains two integers $n$ and $m$ (for $1\le n\le 50, 1\le m\le 200$). Each of the following $m$ lines contains $n$ positive integers representing vessel i‚Äôs handling times $t_{i,1}, t_{i,2}, \dots, t_{i,n} (t_{i,j} \le 1000)$.</p>

<h3 id="output-4">Output</h3>

<p>For each case, output one integer, the minimum total weighted completion time of all the vessels.</p>

<h3 id="sample-input-2">Sample Input</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
5 7
1 2 3 4 5
2 1 3 4 5
2 3 1 4 5
2 3 4 1 5
2 3 4 5 1
2 2 2 2 2
2 2 2 2 2
</code></pre></div></div>

<h3 id="sample-output-2">Sample Output</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11
</code></pre></div></div>

<h3 id="source-4">Source</h3>

<p>Âê¥Âùé</p>

<h3 id="solution-4">Solution</h3>

<p><strong>ËèúÈ∏°ÂëΩÈ¢ò‰∫∫ËÉåÈîÖ‰∫Ü‚Ä¶PDF Input ÁªìÂ∞æÂ§ÑÂ∫îËØ•ÊòØ $t_{i,n}$ ‰∏çÊòØ $t_{i,m}$ÔºåÊ≠§ÈóÆÈ¢òÈó¥Êé•ÂØºËá¥ÊàëÊ†°‰∏ÄÈòüÊ≤°Êúâ AK‚Ä¶</strong></p>

<p>È¢òÁõÆÂ§ßÊÑèÔºö$n$ ‰∏™Âç∏Ë¥ßÁÇπÔºå$m$ Êù°ËàπÔºåËàπ $i$ Âú®Âç∏Ë¥ßÁÇπ $j$ Âç∏Ë¥ßÁöÑÊó∂Èó¥ÊòØ $t_{i,j}$ÔºåÂêå‰∏ÄÊó∂Âàª‰∏Ä‰∏™Âç∏Ë¥ßÁÇπÂè™ËÉΩÊúâ‰∏ÄÊù°ËàπÔºåÁé∞Âú®ÊØèÊù°ËàπÈÉΩË¶ÅÂç∏Ë¥ßÔºåË¶ÅÊúÄÂ∞èÂåñ $\sum_{i=1}^m\left(s_i+t_{i,b_i}\right)$ÔºåÂÖ∂‰∏≠Ëàπ $i$ Âú® $s_i$ Êó∂ÂàªÂºÄÂßãÂú® $b_i$ Âç∏Ë¥ßÁÇπÂç∏Ë¥ß„ÄÇ</p>

<p>ÂÆπÊòìÁúãÂá∫Ôºå$s_i$ ‰∏ÄÂÆöÊòØËã•Âπ≤‰∏™ $t_{a,b}$ ÁöÑÂíå„ÄÇÂõ†Ê≠§Áõ¥Êé•ËÄÉËôëÊØè‰∏™ $t_{a,b}$ ÂØπÁ≠îÊ°àÁöÑË¥°ÁåÆÔºå<strong>‰∏çÈöæ</strong><del>Âè£ÂèØÂè£ÂèØ</del>ÊÉ≥Âá∫‰∏Ä‰∏™Ë¥πÁî®ÊµÅÊ®°ÂûãÔºö</p>

<ol>
  <li>Âª∫Á´ãË∂ÖÁ∫ßÊ∫êÁÇπ $S$ „ÄÅË∂ÖÁ∫ßÊ±áÁÇπ $T$</li>
  <li>ÂØπ‰∫éÊØèÊù°ËàπÂª∫ÁÇπ $P_i$ÔºåÂπ∂ËøûËæπ $P_i\to T$ÔºåËæπÈïø $0$ ÂÆπÈáè $1$</li>
  <li>ÂØπ‰∫éÊØè‰∏™Âç∏Ë¥ßÁÇπÂª∫ÁÇπ $Q_j$ÔºåÂπ∂ËøûËæπ $S\to Q_j$ÔºåËæπÈïø $0$ ÂÆπÈáè $\infty$</li>
  <li>ÂØπ‰∫éÊØè‰∏™Âç∏Ë¥ßÁÇπ $j$ ÂíåÂØπÁ≠îÊ°àÁöÑË¥°ÁåÆÊï∞ $k$ Âª∫ÁÇπ $R_{j,k}$
    <ul>
      <li>ËøûËæπ $Q_j\to R_{j,k}$ÔºåËæπÈïø $0$ ÂÆπÈáè $1$</li>
      <li>ÂØπ‰∫éÊØèÊù°Ëàπ $i$ ËøûËæπ $R_{j,k}\to P_i$ÔºåËæπÈïø $k\times t_{i,j}$ ÂÆπÈáè $1$</li>
    </ul>
  </li>
</ol>

<p>Â¶ÇÊûú‰Ω†ÂØπËøô‰∏™Âª∫ÂõæÊñπÂºè‰ªçÁÑ∂ÊúâÁñëÈóÆÔºåÂèØ‰ª•Áúã‰∏Ä‰∏ãËøô‰∏™ÁÆÄÂçïÁöÑÊ†∑‰æã„ÄÇ</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
1 2
7
10
</code></pre></div></div>

<p>ÂØπÂ∫îÁöÑÂª∫ÂõæÊñπÂºèÂ¶Ç‰∏ãÔºàÂõæ‰∏≠Ëæπ‰∏äÁöÑÊï∞ÊçÆÊòØ‚ÄúËæπÈïøÔºåÂÆπÈáè‚ÄùÁöÑÊ†ºÂºèÔºåË¥πÁî® = ËæπÈïø * ÊµÅÈáèÔºâÔºåÂÆπÊòìÁúãÂá∫ËøôÂº†ÂõæÁöÑÊúÄÂ∞èË¥πÁî®ÊòØ 24Ôºå‰πüÊòØÊúÄÂêéÁöÑÁ≠îÊ°à„ÄÇ</p>

<pre><code class="language-mermaid">flowchart LR
S--"0,#infin;"--&gt;Q1
Q1--0,1--&gt;R1,1
Q1--0,1--&gt;R1,2
R1,1-.7,1.-&gt;P1
R1,1--10,1--&gt;P2
R1,2--14,1--&gt;P1
R1,2-.20,1.-&gt;P2
P1--0,1--&gt;T
P2--0,1--&gt;T
</code></pre>

<p>Áî±‰∫é $\lvert R\rvert \le 50\times 200=10000$Ôºå‰∏äËø∞ÊñπÊ°àÊó∂Èó¥Â§çÊùÇÂ∫¶Èöæ‰ª•Êé•Âèó„ÄÇ‰∫éÊòØËÄÉËôëÂú®Ë∑ëË¥πÁî®ÊµÅÁöÑÊó∂ÂÄôÂä®ÊÄÅÂª∫ÂõæÔºå‰∏ÄËæπÂ¢ûÂπø‰∏ÄËæπÊâ© $R$ ÈõÜÂêàÁöÑÁÇπÔºåÁõ¥Âà∞Ê±áÁÇπÁöÑÊµÅÈáèËææÂà∞ $n$„ÄÇÁî±‰∫éÊØèÊ¨°ÊâæÂà∞ÁöÑÂ¢ûÂπøË∑Ø‰∏ÄÂÆöÁ¨¶Âêà $S\to Q\to R\to P\to T$ ÁöÑÂΩ¢ÂºèÔºåÊ≠§Êó∂ÂØπ‰∫éËøôÊù°Ë∑Ø‰∏äÁöÑ $Q$ ÁÇπÂ∞±ÂèØ‰ª•Êâ©Âº†Êñ∞ÁöÑ‰∏ÄÂ±Ç $R$ ÁÇπÔºå‰∏éÂú®ÂÆåÊï¥Âõæ‰∏äË∑ëË¥πÁî®ÊµÅÂú®ÊïàÊûú‰∏äÊòØÁ≠â‰ª∑ÁöÑ„ÄÇ</p>

<p>‰ª•‰∏ãÊòØÊàëËá™Â∑±ÂÜôÁöÑÊ†áÁ®ãÔºåÁî®‰∫Ü<a href="https://wu-kan.cn/_posts/2019-02-02-%E5%9B%BE%E8%AE%BA/#primaldual-%E6%B1%82%E8%B4%B9%E7%94%A8%E6%B5%81">ÂçïË∑ØÂ¢ûÂπøÁöÑ PD</a>ÔºåÊØî EK ÁÆóÊ≥ïÂø´‰∏âÂÄçÂ∑¶Âè≥Ôºà0.740sÔºö0.219sÔºâ„ÄÇÁî±‰∫éÊú¨È¢òÂä®ÊÄÅÊâ©ÂõæÁöÑÁâπÊÄßÔºåÂèØËÉΩ‰∏çÂ§™ÈÄÇÂêàÂ§öË∑ØÂ¢ûÂπøÁöÑË¥πÁî®ÊµÅÁÆóÊ≥ïÔºåÊÑüÂÖ¥Ë∂£ÁöÑÂêåÂ≠¶ÂèØ‰ª•Ëá™Â∑±Â∞ùËØï‰∏Ä‰∏ã„ÄÇ</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="n">ll</span> <span class="n">INF</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">tim</span><span class="p">[</span><span class="n">M</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>
<span class="k">struct</span> <span class="nc">Graph</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="nc">Vertex</span>
	<span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">o</span><span class="p">;</span>
	<span class="p">};</span>
	<span class="k">struct</span> <span class="nc">Edge</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">;</span>
		<span class="n">ll</span> <span class="n">len</span><span class="p">,</span> <span class="n">cap</span><span class="p">;</span>
	<span class="p">};</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">Vertex</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;</span> <span class="n">e</span><span class="p">;</span>
	<span class="n">Graph</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="o">:</span> <span class="n">v</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{}</span>
	<span class="kt">void</span> <span class="n">add</span><span class="p">(</span><span class="k">const</span> <span class="n">Edge</span> <span class="o">&amp;</span><span class="n">ed</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">v</span><span class="p">[</span><span class="n">ed</span><span class="p">.</span><span class="n">first</span><span class="p">].</span><span class="n">o</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
		<span class="n">e</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ed</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nc">PrimalDual</span> <span class="o">:</span> <span class="n">Graph</span>
<span class="p">{</span>
	<span class="n">ll</span> <span class="n">flow</span><span class="p">,</span> <span class="n">cost</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">;</span>
	<span class="n">PrimalDual</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="o">:</span> <span class="n">Graph</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{}</span>
	<span class="kt">void</span> <span class="n">add</span><span class="p">(</span><span class="n">Edge</span> <span class="n">ed</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Graph</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="n">ed</span><span class="p">);</span>
		<span class="n">swap</span><span class="p">(</span><span class="n">ed</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">ed</span><span class="p">.</span><span class="n">second</span><span class="p">),</span> <span class="n">ed</span><span class="p">.</span><span class="n">cap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ed</span><span class="p">.</span><span class="n">len</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="n">Graph</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="n">ed</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="n">ask</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">now</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">d</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">INF</span><span class="p">),</span> <span class="n">h</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
		<span class="k">for</span> <span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">flow</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);;)</span>
		<span class="p">{</span>
			<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">s</span><span class="p">));</span> <span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">();)</span>
			<span class="p">{</span>
				<span class="n">ll</span> <span class="n">dis</span> <span class="o">=</span> <span class="o">-</span><span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">(),</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dis</span><span class="p">)</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">to</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">o</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">o</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">to</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">second</span><span class="p">,</span>
						<span class="n">e</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">cap</span> <span class="o">&gt;</span> <span class="n">f</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">e</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">len</span> <span class="o">+</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">to</span><span class="p">])</span>
					<span class="p">{</span>
						<span class="n">d</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">e</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">len</span> <span class="o">+</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">to</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
						<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">d</span><span class="p">[</span><span class="n">to</span><span class="p">],</span> <span class="n">to</span><span class="p">));</span>
					<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">==</span> <span class="n">INF</span><span class="p">)</span>
				<span class="k">return</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">d</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INF</span><span class="p">)</span>
					<span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
			<span class="n">ll</span> <span class="n">_f</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">u</span> <span class="o">!=</span> <span class="n">s</span><span class="p">;</span> <span class="n">u</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]].</span><span class="n">first</span><span class="p">)</span>
				<span class="n">_f</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">_f</span><span class="p">,</span> <span class="n">e</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]].</span><span class="n">cap</span> <span class="o">-</span> <span class="n">f</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]]);</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">u</span> <span class="o">!=</span> <span class="n">s</span><span class="p">;</span> <span class="n">u</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]].</span><span class="n">first</span><span class="p">)</span>
				<span class="n">cost</span> <span class="o">+=</span> <span class="n">_f</span> <span class="o">*</span> <span class="n">e</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]].</span><span class="n">len</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">_f</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">^</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">_f</span><span class="p">;</span>
			<span class="n">flow</span> <span class="o">+=</span> <span class="n">_f</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">u</span> <span class="o">!=</span> <span class="n">s</span><span class="p">;</span> <span class="n">u</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">u</span><span class="p">]].</span><span class="n">first</span><span class="p">)</span>
				<span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">u</span> <span class="o">&amp;&amp;</span> <span class="n">u</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">u</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span>
					<span class="o">++</span><span class="n">now</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
					<span class="n">p</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
					<span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">INF</span><span class="p">);</span>
					<span class="n">h</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
					<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Vertex</span><span class="p">());</span>
					<span class="n">add</span><span class="p">({</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">});</span>
					<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
						<span class="n">add</span><span class="p">({</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">tim</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">],</span> <span class="mi">1</span><span class="p">});</span>
					<span class="n">f</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span> <span class="n">t</span><span class="o">--</span><span class="p">;)</span>
	<span class="p">{</span>
		<span class="n">scanf</span><span class="p">(</span><span class="s">"%d%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">);</span>
		<span class="n">PrimalDual</span> <span class="n">g</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span><span class="p">);</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">g</span><span class="p">.</span><span class="n">add</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">INF</span><span class="p">});</span>
			<span class="n">g</span><span class="p">.</span><span class="n">add</span><span class="p">({</span><span class="mi">2</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">});</span>
		<span class="p">}</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tim</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
				<span class="n">g</span><span class="p">.</span><span class="n">add</span><span class="p">({</span><span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">tim</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="mi">1</span><span class="p">});</span>
			<span class="p">}</span>
			<span class="n">g</span><span class="p">.</span><span class="n">add</span><span class="p">({</span><span class="mi">2</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">});</span>
		<span class="p">}</span>
		<span class="n">g</span><span class="p">.</span><span class="n">ask</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">g</span><span class="p">.</span><span class="n">cost</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><del><a href="https://blog.csdn.net/D5__J9">D Âì•</a>Â∏¶Â∏¶Êàë</del></p>
:ET